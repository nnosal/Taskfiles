version: '3'

################################################################################################
#
# ref:
#   - https://taskfile.dev/#/styleguide
#     - https://taskfile.dev/#/styleguide?id=use-the-correct-order-of-keywords
#     - https://taskfile.dev/#/styleguide?id=use-colon-for-task-namespacing
#
################################################################################################

vars:
  CURRENT_DATE: { sh: date +%Y-%m-%d_%H-%M-%S }
  CURRENT_REPO: { sh: "test -d .git && (git remote -v | awk '{print $2}' | head -n 1 | cut -d'/' -f3-)" }
  REPO_NAME: { sh: "test -d .git && (basename -s .git {{.CURRENT_REPO}})"}
  DEFAULT_NOTIFY: "ntfy.sh/wsenotif-{{.REPO_NAME}}"

tasks:
  echo:
    cmd: echo "hello world"

  test-inline-file:
    desc: "Test append file with lineinfile port."
    cmds:
    - task: lineinfile
      vars: { PATH: './testfile.txt', LINE: 'APPEND LINE', CREATE: true }

  lineinfile:
    internal: true
    desc: "Add, modify, or delete a line in a file with advanced options."
    summary: |
      A experimental port of the 'lineinfile' Ansible module
      This task enables you to manage lines in a file with advanced options.
      Such as creating backups before inserting lines, and performing conditional replacements.
    requires: { vars: [ "PATH", "LINE" ] }
    silent: true
    vars:
      PATH: "{{.PATH}}"
      LINE: "{{.LINE}}"
      STATE: "{{.STATE | default `present`}}"
      REGEXP: "{{.REGEXP | default ``}}"
      SEARCH_STRING: "{{.SEARCH_STRING | default ``}}"
      INSERTAFTER: "{{.INSERTAFTER | default `EOF`}}"
      INSERTBEFORE: "{{.INSERTBEFORE | default ``}}"
      BACKREFS: "{{.BACKREFS | default false}}"
      CREATE: "{{.CREATE | default false}}"
      BACKUP: "{{.BACKUP | default false}}"
      OWNER: "{{.OWNER | default ``}}"
      GROUP: "{{.GROUP | default ``}}"
      MODE: "{{.MODE | default ``}}"
      VALIDATE: "{{.VALIDATE | default ``}}"
    cmds:
    - |
      FILE="{{.PATH}}"

      # Create the file if necessary
      if [ ! -f "$FILE" ] && {{.CREATE}}; then
        touch "$FILE"
      elif [ ! -f "$FILE" ]; then
        echo "Error: File $FILE does not exist and CREATE is false." >&2
        exit 1
      fi

      # Backup the file if requested
      if {{.BACKUP}}; then
        cp "$FILE" "$FILE.bak_$(date +%Y%m%d%H%M%S)"
      fi

      # Remove the line if STATE=absent
      if [ "{{.STATE}}" = "absent" ]; then
        sed -i '/{{.REGEXP}}/d' "$FILE"
        exit 0
      fi

      # Handle replacements with BACKREFS
      if {{.BACKREFS}}; then
        sed -Ei 's/{{.REGEXP}}/{{.LINE}}/' "$FILE"
      elif [ -n "{{.REGEXP}}" ]; then
        sed -i 's/{{.REGEXP}}/{{.LINE}}/' "$FILE"
      elif [ -n "{{.SEARCH_STRING}}" ]; then
        sed -i "/{{.SEARCH_STRING}}/c {{.LINE}}" "$FILE"
      elif [ -n "{{.INSERTBEFORE}}" ]; then
        sed -i '/{{.INSERTBEFORE}}/i {{.LINE}}' "$FILE"
      elif [ "{{.INSERTAFTER}}" = "EOF" ]; then
        echo "{{.LINE}}" >> "$FILE"
      else
        sed -i '/{{.INSERTAFTER}}/a {{.LINE}}' "$FILE"
      fi

      # Apply permissions if specified
      if [ -n "{{.OWNER}}" ]; then chown {{.OWNER}} "$FILE"; fi
      if [ -n "{{.GROUP}}" ]; then chgrp {{.GROUP}} "$FILE"; fi
      if [ -n "{{.MODE}}" ]; then chmod {{.MODE}} "$FILE"; fi

      # Validate if requested
      if [ -n "{{.VALIDATE}}" ]; then
        TEMP_FILE=$(mktemp)
        cp "$FILE" "$TEMP_FILE"
        if ! {{.VALIDATE}} "$TEMP_FILE"; then
          echo "Error: Validation failed, changes not applied." >&2
          rm "$TEMP_FILE"
          exit 1
        fi
        rm "$TEMP_FILE"
      fi

  ssh:cmd:
    desc: "SSH an HOST"
    preconditions: 
      - sh: 'command -v timeout'
        msg: 'Require: timeout for verification'
      - timeout 10 ssh {{.name}} 'exit'
    requires: { vars: [ name, cmd ] }
    cmd: |
        ssh {{.name}} '
        {{if .path}} cd {{.path}} && {{end}}
        {{.cmd}}
        '

  notify:
    internal: true
    requires: { vars: [ MSG ] } # TO=
    vars:
      DEST_NOTIFY: "{{.TO | default .DEFAULT_NOTIFY}}"
    cmds: 
     - curl -k -d "{{.CURRENT_DATE}} - {{.MSG}} DONE." https://{{.DEST_NOTIFY}}
     - echo "Notification sent to {{.DEST_NOTIFY}}."

  rsync:
    internal: true
    requires: { vars: [SRC, DEST] }
    preconditions: 
      - sh: 'command -v ssh'
        msg: 'Require: ssh for connect'
      - sh: 'command -v rsync'
        msg: 'Require: rsync for update files'
      #- sh: test -e {{.SRC}} || (ssh "{{.SRC}}" 'exit' && echo OK)
      #  msg: 'SRC not valid'
      #- sh: test -e {{.DEST}} || (ssh "{{.DEST}}" 'exit' && echo OK)
      #  msg: 'DEST not valid'
    vars:
      EXCLUDE_ARGS:         '{{range .EXCLUDES}}--exclude=\"{{.}}\" {{end}}'
      RELATIVE_BUPDIR_ARGS: '{{if .RELATIVE_BUPDIR}}--delete --backup --backup-dir="{{.RELATIVE_BUPDIR}}" {{end}}'
      #SRC_IS_SSH: "{{if hasPrefix \"ssh\" .SRC}}OK{{else}}NOK{{end}}"
      EXTRA_ARGS: '{{.EXTRA_ARGS | default "" }}'
    cmds:
      - |
        # CHECK.. If path are ok (test ssh too)
        SSH_ARGS=$(for location in "{{.SRC}}" "{{.DEST}}"; do if ! test -e "$location"; then if ssh "${location%%:*}" 'exit' 2>/dev/null; then echo "-e ssh"; else echo "Fail: $location is invalid" >&2; exit 1; fi; fi; done)
        echo $SSH_ARGS
      #- echo "Are you sure?" && read CONTINUE
      - | 
        # RUN RSYNC..
        rsync -avz -P {{.EXTRA_ARGS}} \
        {{.RELATIVE_BUPDIR_ARGS}} \
        {{.EXCLUDE_ARGS}} \
        ${SSH_ARGS} {{.SRC}} {{.DEST}}

  rsync:backup:
    desc: "Sync 2 folders with incremental-backup"
    requires: { vars: [SRC, DEST] }
    cmds: 
      - task: rsync
        vars: 
          SRC: '{{.SRC}}/' # "SRC:PATH/"
          DEST: '{{.DEST}}/' # "DEST:PATH/"
          RELATIVE_BUPDIR: '../.previous/{{ .CURRENT_DATE }}/'
          EXCLUDES: '{{.EXCLUDES | default [] }}' #[ "data/*" ]
          EXTRA_ARGS: '{{.EXTRA_ARGS | default "" }}'
      - task: notify

################################################################################################
